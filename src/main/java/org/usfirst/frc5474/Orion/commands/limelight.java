// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5474.Orion.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5474.Orion.Robot;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class limelight extends Command {
    NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight-orion");

    public int counter = 0;
    public boolean ledOn = false;
    //public float estimateDistance;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public limelight() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
      if (Robot.oi.xBOXController.getRawButton(7)){
        ledOn = !ledOn;
        if (ledOn) {
          NetworkTableInstance.getDefault().getTable("limelight").getEntry("ledMode").getDouble(1);
          ledOn = false;
        } else if (ledOn == false){
          NetworkTableInstance.getDefault().getTable("limelight").getEntry("ledMode").getDouble(3);
        }
      }

    NetworkTableEntry tx = table.getEntry("tx");
      NetworkTableEntry ty = table.getEntry("ty");
      NetworkTableEntry ta = table.getEntry("ta");
      //SmartDashboard.putNumber("counting", counter);

    //reading values periodically
      double x = tx.getDouble(0.0); //provides x angular offset
      double y = ty.getDouble(0.0); //provides y angular offset (probably wont need)
      double area = ta.getDouble(0.0);
      double k = 52.0; //calibrated for inches
      double distance = k/(Math.sqrt(area));
      double realXdist = distance*(Math.sin(Math.toRadians(x)));

      SmartDashboard.putNumber("real x dist", realXdist);
      //SmartDashboard.putNumber("k val", k);
      SmartDashboard.putNumber("distance val", distance);
      //SmartDashboard.putNumber("more counting", counter);

    //posting to smartdashboard periodically
      SmartDashboard.putNumber("LimelightX", x);
      SmartDashboard.putNumber("LimelightY", y);
      //SmartDashboard.putNumber("LimelightArea", area);
      //SmartDashboard.putNumber("even more counting", counter);

      counter++;

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}

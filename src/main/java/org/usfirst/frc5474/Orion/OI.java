// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5474.Orion;

import org.usfirst.frc5474.Orion.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton winchOnlyButton;
    public JoystickButton barButton;
    public JoystickButton climbButton;
    public Joystick xBOXController;
    public JoystickButton setPosBottom;
    public JoystickButton setPosHatch1;
    public JoystickButton setPosBall1;
    public JoystickButton setPosHatch2;
    public JoystickButton setPosBall2;
    public JoystickButton setPosHatch3;
    public JoystickButton setPosBall3;
    public JoystickButton toggleClaw;
    public JoystickButton togglePusher;
    public JoystickButton TriggerR;
	public JoystickButton TriggerL;
    //public JoystickButton manualArm;

    public JoystickButton armManual;
    public JoystickButton resetEncoderButton;
    public JoystickButton setPreGamePos;
    public JoystickButton hingeManual;
    //public JoystickButton manualArmToggle;

    public Joystick proJoystick;
    //public final int uprightVal = 3;
    //public final int dropAngleVal = 2;
    //public final int flatVal = 1;

    //now in pulse based values
    public final int posBottom = 0; //this is about the pulses needed to bring the arm up to what will be level to the mid range of the ball height
    //im thinking this will still be 0, however charlie believes the angle is ~39, meaning 3970 pulses
    public final int posHatch1 = 200; //150
    public final int posBall1 = 200; //200
    public final int posHatch2 = 200; //200
    public final int posBall2 = 400; //400
    public final int posHatch3 = 400; //?
    public final int posBall3 = 400; //? 
    public final int upright = 300; //300

    /* Values Charlie posted in degrees just incase the setDistancePerPulse thing is actually what we need in degrees
    public final int posBottom = 39.77
    public final int posHatch1 = 57.5
    public final int posBall1 = 67.6
    public final int posHatch2 = 88.9
    public final int posBall2 = 97.9
    public final int posHatch3 = 120
    public final int posBall3 = 131.1
    public final int upright = 35.4
    */

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        proJoystick = new Joystick(1);

        hingeManual = new JoystickButton(proJoystick, 5);
        hingeManual.toggleWhenPressed(new manualHinge());
        
        setPreGamePos = new JoystickButton(proJoystick, 4);
        setPreGamePos.whenPressed(new setPosition(0.0, upright));
        setPosBall3 = new JoystickButton(proJoystick, 8);
        
        //need to calibrate both parameters for setPosition
        setPosBall3.whenPressed(new setPosition(727.6, posBall3)); //probably is not correct level for ball 3, but maybe
        setPosHatch3 = new JoystickButton(proJoystick, 7);
        setPosHatch3.whenPressed(new setPosition(666, posHatch3));
        setPosBall2 = new JoystickButton(proJoystick, 10);
        setPosBall2.whenPressed(new setPosition(543.79, posBall2));
        setPosHatch2 = new JoystickButton(proJoystick, 9);
        setPosHatch2.whenPressed(new setPosition(1200, posHatch2)); //only changing the hinge value for hatch 2 pos
        setPosBall1 = new JoystickButton(proJoystick, 12);
        setPosBall1.whenPressed(new setPosition(375.7, posBall1));
        setPosHatch1 = new JoystickButton(proJoystick, 11);
        setPosHatch1.whenPressed(new setPosition(800, posHatch1));

        setPosBottom = new JoystickButton(proJoystick, 3);
        setPosBottom.whenPressed(new setPosition(220.78, posBottom));
        //setPosBottom.whenPressed(new setPosition());
        //manualArm = new JoystickButton(proJoystick, 4);
        //manualArm.whenPressed(new activateManualArm());
        toggleClaw = new JoystickButton(proJoystick, 1);
        toggleClaw.whenPressed(new Claw());
        togglePusher = new JoystickButton(proJoystick, 2);
        togglePusher.whenPressed(new Pusher());
        
        //temp. numbers for the setpos
        
        /*manualArmToggle = new JoystickButton(proJoystick, 4);
        manualArmToggle.whenPressed(new manualArm());*/

        armManual = new JoystickButton(proJoystick, 6);
        armManual arm = new armManual();
        armManual.whenReleased(arm);

        xBOXController = new Joystick(0);
        resetEncoderButton = new JoystickButton(xBOXController, 7);
        resetEncoderButton.whenPressed(new ResetArmEncoder());
        
        climbButton = new JoystickButton(xBOXController, 3);
        climbButton.whileHeld(new climbSequence());
        barButton = new JoystickButton(xBOXController, 2);
        barButton.whenPressed(new dropBar());
        winchOnlyButton = new JoystickButton(xBOXController, 1);
        winchOnlyButton.whileHeld(new runWinch());


        // SmartDashboard Buttons
        SmartDashboard.putData("climbSequence", new climbSequence());
        //SmartDashboard.putData("arcadeDrive", new arcadeDrive());
        SmartDashboard.putData("tractionDrive", new tractionDrive());
        //SmartDashboard.putData("openClaw", new openClaw());
        //SmartDashboard.putData("closeClaw", new closeClaw());
        //SmartDashboard.putData("pushBall", new pushBall());
        //SmartDashboard.putData("runWinch", new runWinch());
        //SmartDashboard.putData("dropBar", new dropBar());
        SmartDashboard.putData("reset hinge", new ResetHingeEncoder());
        SmartDashboard.putData("reset arm", new ResetArmEncoder());


        //limelight button
        SmartDashboard.putData("limelight", new limelight());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXBOXController() {
        return xBOXController;
    }


    public Joystick getProJoystick() {
        return proJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


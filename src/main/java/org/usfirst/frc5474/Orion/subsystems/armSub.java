// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5474.Orion.subsystems;

import org.usfirst.frc5474.Orion.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.IndexingType;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc5474.Orion.Robot;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class armSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark armMotor;
    private Spark hingeMotor;
    private Encoder armEncoder;
    private Encoder hingeEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public armSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armMotor = new Spark(4);
        addChild("armMotor", armMotor);
        armMotor.setInverted(false);

        hingeMotor = new Spark(5);
        addChild("hingeMotor", hingeMotor);
        hingeMotor.setInverted(false);

        armEncoder = new Encoder(0, 1, false);
        addChild("armEncoder", armEncoder);
        armEncoder.setDistancePerPulse(3 * Math.PI / 360);
        armEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        //armEncoder.setIndexSource(2, IndexingType.kResetOnRisingEdge);

        hingeEncoder = new Encoder(2, 3, false);
        addChild("hingeEncoder", hingeEncoder);
        hingeEncoder.setDistancePerPulse(3 * Math.PI / 360);
        hingeEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        //hingeEncoder.setIndexSource(5, IndexingType.kResetOnRisingEdge);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // @param armPos = double of desired arm position
    public void moveArmToPos(double armPos) {
        boolean needsToRun = true; //Boolean to run while loop below
        double currentArmPos = armEncoder.getDistance(); //Gets current arm position encoder value
        while (needsToRun == true) { //Checks if arm motor needs to run
            SmartDashboard.putNumber("currentArmPos", armEncoder.getDistance()); //Pushes arm encoder value to Smart Dashboard
            if (currentArmPos <= (armPos - 0.01)) { //Checks if current arm position is less than or equal to desired arm position, but subtracts .01? I feel like this is the same function as the final if statement but reduntant.
                //while (currentArmPos < armPos) {
                    armMotor.set(.25); //Sets motor power to positive 25%
                    currentArmPos = armEncoder.getDistance(); // updates current arm position
                //}
            }
            else if (currentArmPos >= (armPos + 0.01)) { // Checks if current arm position is greater than or equal to desired arm position, but subtracts .01? I feel like this is the same function as the final if statement but reduntant.
                //while (currentArmPos > armPos) {
                    armMotor.set(-.25); //Sets motor power to negative 25%
                    currentArmPos = armEncoder.getDistance(); // Updates current arm position
                //}
            }
            
            //I (this is Charlie) think this should just be 'if' rather than else if.
            //Otherwise, it will only run if currentArmPos is <= (armPos - 0.01). 
            //This completely ignores every other case.
            //The purpose of this function is to create a buffer on both sides of current arm position to prevent shaking of motor.
            else if(currentArmPos > (armPos - .25) && currentArmPos < (armPos + .25)){ //If currentArmPos is between desired arm position minus .25 and desired arm position plus .25: continue
                needsToRun = false; // Sets needsToRun is false to break while loop
            }
        }

    }

    public double getSensitivity() {
        double sensitivitySlider = Robot.oi.proJoystick.getRawAxis(3);
        return (sensitivitySlider + 1.0) / 2;
    }

    public void moveArmManual(double direction) {
        armMotor.set(direction);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new setPosition());
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
